Lokalny brak żywotności: 
4
Ma miejsce, gdy kilka procesów wchodzi jednocześnie do sekcji krytycznej 
Polega na całkowitym zatrzymaniu pracy części aplikacji współbieżnej 
To sytuacja gdy jeden lub kilka procesów jest wykluczony, ale nie wiadomo który 
Nie można tego definitywnie stwierdzić przy obserwacji (testowaniu) aplikacj
d

Lokalny brak żywotności: 
4
powoduje całkowite zatrzymanie całości (lub części) aplikacji, 
występuje wtedy gdy 2 lub więcej procesów wejdzie do sekcji krytycznej jednocześnie 
polega na głodzeniu części procesów, może być to stwierdzone poprzez testowanie 
jeżeli aplikacja jest niepoprawna, to może wystąpić lub nie 
d

Globalny brak żywotności: 
4
Powoduje całkowite zatrzymanie całości (lub części) aplikacji 
występuje wtedy gdy 2 lub więcej procesów wejdzie do sekcji krytycznej jednocześnie 
Polega na głodzeniu części procesów 
Jest mniej groźny w skutkach niz. lokalny brak żywotności 
a

Globalny brak żywotności (deadlock): 
4
ma miejsce, gdy kilka procesów wchodzi jednocześnie do sekcji krytycznej, 
polega na zaobserwowaniu chwilowego zatrzymania pracy części procesów aplikacji współbieżnej 
to sytuacja, gdy kilka procesów jest czasowo wykluczonych 
można to jednoznacznie stwierdzić przy obserwacji zachowania procesów   
d

Instrukcje atomowe w przetwarzaniu współbieżnym: 
4
Nie istnieją na żadnym poziomie abstrakcji 
Polega na współbieżnej realizacji wykonania procedur krytycznych 
Zakłada się ich atomowość na poziomie abstrakcji programowania 
Ich implementacja na poziomie systemowym (niższym) jest niepodzielna 
c

Instrukcje atomowe w przetwarzaniu współbieżnym: 
4
nie istnieją na żadnym poziomie abstrakcji 
polegają na współbieżnej realizacji wykonania procedur krytycznych 
ich implementacja na poziomie systemowym (niższym) jest niepodzielna 
żadna z odpowiedzi nie jest poprawna 
d

Program współbieżny jest poprawny: 
4
Gdy realizuje w sposób właściwy zadane operacje dla zadanych scenariuszy 
Posiada poprawne mechanizmy synchronizacji przy wejściu do sekcji krytycznej 
Wszystkie procesy działają zgodnie ze specyfikacjami 
Żadna z odpowiedzi nie jest poprawna 
d

Program współbieżny jest poprawny: 
4
gdy realizuje w sposób właściwy zadane operacje dla zadanych scenariuszy, 
posiada poprawne mechanizmy synchronizacji przy wejściu do sekcji krytycznej 
wszystkie procesy działają zgodnie ze specyfikacjami 
wszystkie odpowiedzi są błędne 
d

Semafor binarny: 
4
Nie można go podnosić, gdy jest podniesiony 
Operacje podnoszenia i opuszczania są dla niego atomowe 
Przyjmuje wartości dodatnie oraz zero gdy jest opuszczony 
Nie można go wykorzystywać do kontroli dostępu wyjścia do sekcji krytycznej 
b

Semafor uogólniony 
4
operacje podnoszenia i opuszczania nie są dla niego atomowe 
przyjmuje wartości dodatnie oraz 0, a gdy opuszczony to ujemne 
na podstawie jego wartości aplikacja określa jego stan 
można go wykorzystać do kontroli dostępu wyjścia do sekcji krytycznej 
d

Monitory: 
4
to obiekty aktywne mogą realizować operacje współbieżne 
Mogą posiadać stan (zmienne) oraz dostarczają współdzielonych procedur 
Proces jeżeli rozpocznie wykonywanie procedury monitora to na pewno ją zakończy 
Dwa procesy mogą być w monitorze, jeden wykonuje procedurę "wait", drugi "signal" 
b

Monitory: 
4
to obiekty pasywne, mogą realizować procedury współbieżne 
nie mogą posiadać stanu (zmiennych), dostarczają tylko współdzielonych procedur 
proces jeżeli rozpocznie procedurę monitora to ją zakończy w określonym czasie 
wykonując procedurę wait proces zawsze zatrzymuje się 
d

Operacje na zmiennej typu condition: 
4
Implementują koncepcje semafora w procedurach monitorowych 
Po sprawdzeniu warunku condition proces jest wstrzymywany lub nie 
Są zmienne do operacji semaforowych w programowaniu współbieżnym 
żadna z odpowiedzi nie jest poprawna 
d

Operacje na zmiennej typu condition: 
4
implementują koncepcję współbieżności w wielowejściowych procedurach monitorowych 
po sprawdzeniu warunku condition proces może zostać wstrzymany 
wykonywane są w sposób wykluczający 
są zamienne do operacji semaforowych w programowaniu współbieżnym 
c

Monitory w zestawieniu z semaforami 
4
Są bardziej efektywne i powodują lepszy stopień faktycznej współbieżności 
Nie występują w klasycznym (czystym) języku C 
Są wygodne ze względu na systemową implementację sekcji krytycznej 
Są dostarczane z poziomu systemowego 
c

Monitory w zestawieniu z semaforami 
4
są efektywniejsze i powodują wyższy stopień faktycznej współbieżności 
występują w klasycznym (czystym) języku C 
są niepraktyczne ze względu na skomplikowaną implementację operacji wykluczających 
żadna odpowiedź nie jest prawdziwa 
d

Wątek w odróżnieniu od procesu: 
4
Nie posiada własnego wskaźnika stosu 
Może wywoływać wszystkie procedury dostępne w programie 
Ma dostęp do wartości dostępnych zmiennych w programie 
Może powodować niespójność stanu dla zmiennych w programie 
d

Wątek w odróżnieniu od procesu: 
4
nie posiada własnego wskaźnika stosu 
może wywoływać wszystkie procedury dostępne w programie 
ma dostęp do wartości dostępnych zmiennych w programie 
żadna odpowiedź nie jest poprawna 
d

Procesy w środowisku LINDA synchronizują się: 
4
Poprzez przestrzeń krotek bezpośrednio nadawca-adresat 
Nie mogą się synchronizować z natury stosowanych mechanizmów 
Poprzez przestrzeń krotek: proces wystawia krotkę, którą inny może ew. pobrać 
Procesy są całkowicie niezależne, mogą być synchronizowane przez proces zarządcy 
c

Globalny brak żywotności (deadlock): 
5
Ma miejsce, gdy proces zatrzymuje się wewnątrz sekcji krytycznej 
Polega na zaobserwowaniu zatrzymania pracy części procesów w aplikacji rozproszonej 
To sytuacja, gdy procesy błędnie realizują swoje specyfikacje 
Nie wystąpi, o ile procesy poprawnie komunikują się pomiędzy sobą 
Jest nie do wykrycia przez procesy będące częścią aplikacji rozproszonej 
e

Lokalny brak żywotności: 
5
Powoduje czasowe zatrzymanie określonej części aplikacji  
Występuje wtedy gdy 2 lub więcej procesów wejdzie do sekcji krytycznej jednocześnie 
Polega na głodzeniu części procesów, może być stwierdzony poprzez testowanie 
Jeżeli aplikacja jest niepoprawna, to wystąpi w skończonym czasie 
Może być zidentyfikowany jedynie na drodze rozważań teoretycznych 
e

Instrukcje atomowe w przetwarzaniu współbieżnym: 
5
Zakłada się ich istnienie na każdym poziomie abstrakcji  
Polegają na jednoczesnej realizacji wykonania procedur krytycznych  
Ich realizacja na poziomie niższym (np. systemowym) jest niepodzielna 
Wszystkie wywołania procedur z poziomu niższego są atomowe  
Żadna z odpowiedzi nie jest poprawna 
a

Program rozproszony jest poprawny: 
5
Gdy realizuje w sposób właściwy zadane operacje dla zadanych scenariuszy 
Posiada poprawne mechanizmy synchronizacji przy wejściu do sekcji krytycznej 
Wszystkie procesy działają zgodnie ze specyfikacjami 
Nie można w praktyce pokazać żadnego błędnego scenariusza wykonania  
Wszystkie odpowiedzi są niepoprawne 
e

Które zdanie dotyczy semafora uogólnionego i jest prawdziwe?
5
Operacje podnoszenia i opuszczania nie są dla niego atomowe 
W założeniu przyjmuje wartości dodatnie oraz zero gdy jest opuszczony 
Na podstawie jego wartości aplikacja określa jego stan i zatrzymuje się lub nie 
Można go wykorzystywać do kontroli dostępu do sekcji krytycznej 
Wszystkie odpowiedzi są błędne
d

Monitory: 
5
To obiekty pasywne, eksportują procedury, które mogą być wykonywane jednocześnie 
Nie posiadają stanu (zmiennych), dostarczają tylko współdzielonych procedur 
Proces jeżeli rozpocznie procedurę monitora to ją zakończy w określonym czasie 
Procedura wait wykonywana może być tylko po sprawdzeniu określonego warunku stanu 
Są mniej efektywne wydajnościowo w implementacji w porównaniu z semaforami 
e

Operacje na zmiennej typu condition w monitorze: 
5
Implementują koncepcję atomowości w procedurach monitorowych 
Po sprawdzeniu warunku condition proces może zostać wstrzymany  
Wykonywane są w sposób wykluczający 
Są zamienne do operacji semaforowych w programowaniu współbieżnym 
Wszystkie odpowiedzi są błędne 
c

Monitory w zestawieniu z semaforami: 
5
Są wygodniejsze w zastosowaniu i zapewniają  wyższą efektywność aplikacji 
Występują w klasycznym (czystym) języku C  
Są niepraktyczne ze względu na skomplikowaną implementację operacji wykluczających 
Mogą powodować wstrzymywanie procesów z powodów niezwiązanych ze specyfikacjami 
Żadna z odpowiedzi nie jest prawdziwa 
d

Wątek w odróżnieniu od procesu: 
5
Nie posiada własnego stosu  
Jego wykonanie może powodować głodzenie innych wątków (procesów) 
Może wywoływać wszystkie procedury dostępne w programie 
Ma dostęp do wartości dostępnych zmiennych w programie 
Żadna z odpowiedzi nie jest poprawna 
e
