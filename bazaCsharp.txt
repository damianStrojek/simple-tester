Wskaż poprawną deklarację zmiennej female dla poniższego kodu: 
List<string> names = new List<string>() { "Monika", "Karol", "Ewa" }; 
female = delegate (string s) { return (s[s.Length - 1] == 'a'); };
names.FindAll(female).ForEach(name => Console.WriteLine(name));
5
Func<bool> female;
Func<string, bool> female;
Func<bool, string> female;
Predicate<string> female;
Action<string> female;
d

Wykonanie poniższego kodu spowoduje wyświetlenie na konsoli:
List<string> names = new List<string>() {"Monika", "Karol"};
var results = from e in names
group e by e[e.Length - 1] == 'a';
names.Add("Ewa");
results.Count();
names.Add("Magda");
foreach (var group in results) {
if (group.Key) foreach (string name in group) {
Console.Write(name + " ");
}
}
5
Monika
Monika Ewa
Monika Karol Ewa
Monika Ewa Magda
Monika Karol Ewa Magda
d

Wskaż poprawne zapytanie LINQ (2 odpowiedzi poprawne):
List<string> names = new List<string>() { "Monika", "Karol", "Ewa" };
var results = from n in names where n[n.length-1] == 'a' select n;
var results = select n from names n where n[n.length-1] == 'a'
var results = names.Where(n[n.length-1] == 'a').Select(n);
var results = names.Where(n => n[n.length-1] == 'a').Select(n => n);
ad

Środowisko wykonawcze .NET:
4
jest dostępne jako zestaw bibliotek w systemie Windows i w systemie Linux
jest maszyną wirtualną działającą zarówno w systemie Windows, jak i Linux
jest osadzone w systemie Windows, a w systemie Linux jest maszyną wirtualną
jest zintegrowane z systemem Windows, a w systemie Linux tworzy osobne jądro systemu operacyjnego
a

Typem referencyjnym w C# jest:
4
`DateTime`
`struct`
`enum`
`String`
d

Czym w C# różni się użycie modyfikatorów `ref` oraz `out` dla parametrów?
4
Parametr „ref” jest przekazywany przez referencję, a „out” przez wartość
Parametr „ref” może być użyty tylko do typów wartościowych, a „out” tylko do typów referencyjnych
Parametr „out” musi mieć przypisaną wartość przed wyjściem z funkcji
Parametr „ref” może posiadać wartość przed wywołaniem, a parametr „out” nie może
c

Właściwości (properties) różnią się od pól (fields) klas tym, że:
4
można je serializować i deserializować, a pola nie
nie można ich inicjować w miejscu deklaracji, a pola można
są dziedziczone, a pola nie
mają metody dostępu, a pola nie
d

Który z wymienionych typów w C# nie jest zgodny z CLS?
4
`enum`
`event`
`Int64`
`UInt32`
d

Implementacja zagadnień przecinających (crosscutting concerns) w obiektowych językach programowania prowadzi do (2 odpowiedzi poprawne):
4
code scattering
code tangling
code obliviousness
code quantification
ab

Które klasy dostarczają metodę do zmiany bieżącej pozycji w strumieniu (2 odpowiedzi poprawne):
5
`FileStream`
`MemoryStream`
`StreamReader`
`StringReader`
`StreamWriter`
ab

Kolekcje oferujące złożoność gorszą niż *O(log n)* dla wyszukiwania po kluczu to (2 odpowiedzi poprawne):
5
List
LinkedList
SortedList
SortedSet
SortedDictionary
ab

Aby obiekty klasy `TKey` mogły posłużyć jako klucze w kolekcji `SortedDictionary<TKey, TValue>` utworzonej konstruktorem bezparametrowym:
4
`Tkey` musi implementować `IEquatable<TKey>`
`Tkey` musi implementować `IEqualityComparer<TKey>`
`Tkey` musi implementować `IComparable<TKey>` lub `IComparable`
`Tkey` musi implementować `IComparer<TKey>`
c

Zazwyczaj, gdy często musimy dodawać i usuwać elementy właściwsza będzie kolekcja (2 odpowiedzi poprawne):
4
`ObservableCollection<T>` niż `BlockingCollection<T>`
`LinkedList<T>` niż `List<T>`
`ConcurrentDictionary<TKey, TValue>` niż `Dictionary<TKey, TValue>`
`Dictionary<TKey, TValue>` niż `SortedList<TKey, TValue>`
bd

W przypadku implementacji własnej kolekcji możliwość iteracji po jej elementach instrukcją foreach zapewnia (3 odpowiedzi poprawne):
5
implementacja interfejsu `ICollection<T>`
implementacja interfejsu `IEnumerable`
implementacja interfejsu `IEnumerable<T>`
implementacja interfejsu `IEnumerator<T>`
implementacja interfejsu `IEnumerator`
abc

Jeśli instrukcja Task result = await myMethod(); jest poprawna to typem zwracanym przez `myMethod()` jest:
5
`void`
`Task<void>`
`Task<Task>`
`Task<object>`
`Task`
c

Aby metoda isNull(Object obj) sprawdzała, czy jej argument jest null’em w
miejsce komentarza należy wstawić:
private static Boolean isNull(Object obj){
// comment
return false;
}
5
if(obj = null) return true;
if(obj as null) return true;
if(obj == null) return true;
if(obj is null) return true;
if(obj) return true;
c

Stworzenie instancji klasy C spowoduje wyświetlenie na konsoli:
class A {
public A() { Console.Write(„A”); }
}
class B : A {
public B() { Console.Write(„B”); }
}
class C : B {
public C() : base() { Console.Write(„C”); }
}
4
A B C
C B A
B C
A C
a

Zwykle .NET Assembly (3 odpowiedzi poprawne):
5
zawiera *assembly manifest*
zawiera *type metadata*
zawiera *Common Language Specification (CLS)*
może być wykonana przez CLR
może być wykonana przez JVM
abd

RoutedEvent może przyjąć następujące strategie poruszania się po drzewie elementów (3 odpowiedzi poprawne):
5
Bubbling
Cascading
Tunneling
Leveling
Direct
ace

Entity Framework wspiera następujące podejścia do tworzenia baz danych (3 odpowiedzi poprawne):
5
code first
model first
database first
connection first
generic database
abc

Wywołanie delegatu myDelegate w sposób przedstawiony poniżej sprawi, że:
Func<int, int> myDelegate;
myDelegate = (x) => 2 * x;
myDelegate += (y) => y * y;
int result = myDelegate(3);
4
obie funkcje anonimowe zostaną wykonane asynchronicznie
obie funkcje anonimowe zostaną wykonane synchronicznie, najpierw ta z argumentem x potem ta z argumentem y
obie funkcje anonimowe zostaną wykonane synchronicznie przy czym kolejność wykonania nie jest gwarantowana
wykonana zostanie tylko funkcja anonimowa z argumentem y
b

Jeśli poniższa instrukcja jest poprawna to typem zwracanym przez myMethod()
jest:
Task result = await myMethod();
5
void
Task<void>
Task<Task>
Task<object>
Task
c

Próba kompilacji i wykonania poniższego kodu spowoduje:
int[] myArray = new int[2];
myArray[0] = 1;
IList myList = myArray;
myList.Add(2);
Console.WriteLine(myArray[1]);
4
kod nie skompiluje się
kod skompiluje się, ale w trakcie wykonania zostanie rzucony wyjątek
kod wykona się i na konsoli zostanie wypisana wartość 2
kod wykona się i na konsoli zostanie wypisana wartość 0
b

Wskaż różnice pomiędzy `Task.Run` a `Task.Factory.StartNew` (2 odpowiedzi poprawne):
4
w przypadku `Task.Run` nie ma możliwości przekazania “object state”, który będzie używany jako parametr delegatu
`Task.Factory.StartNew` umożliwia zdefiniowanie dodatkowych parametrów zapewniających większą kontrolę nad wykonywanym Task’iem
`Task.Factory.StartNew` ma status obsolete/deprecated
`Task.Run` ma status oboslete/deprecated
ab

Wykonanie poniższego kodu spowoduje wyświetlenie na konsoli:
List<string> names = new List<string>() {"Monika", "Karol"};
char firstLetter = 'K';
var results = names.Where(e => e[0] == firstLetter).Select(e => e).ToList();
firstLetter = 'M';
names.Add("Marta");
foreach (string s in results) Console.Write(s + " ");
5
Karol 
Monika
Monika Marta
kod nie skompiluje się
nic nie zostanie wyświetlone
a

Wskaż poprawną deklarację zmiennej cout dla poniższego kodu:
List<string> names = new List<string>() { "Monika", "Karol", "Ewa" };
cout = name => Console.WriteLine(name.Length);
names.FindAll(s => (s[s.leLength-1] == 'a')).ForEach(cout);
5
Func<string, void> cout;
Func<string, int> cout;
Predicate<string> cout;
Predicate<int> cout;
Action<string> cout;
e

Który kod wstawiony w miejsce komentarza nie spowoduje błędów kompilacji dla
poniższego
programu:
public delegate int BinaryOp(int x, int y);
class Program {
public static int Add(int x, int y) {
return x + y;
}
static void Main(string[] args) {
// komentarz
}
}
4
Func<int, int, int> op = new BinaryOp(Add);
Func<int, int, int> op = delegate (int x, int y) { return x + y; };
BinaryOp op = (x, y) => x + y;
BinaryOp op = new Func<int, int, int>(Add);
bc

Wykonanie poniższego kodu spowoduje wyświetlenie na konsoli:
List<string> names = new List<string>() {"Monika", "Karol"};
char firstLetter = 'K';
var results = from e in names
where e[0] == firstLetter
select e;
firstLetter = 'M';
List<string> resultList = results.ToList();
names.Add("Marta");
var finalResults = from e in resultList
where e[0] == firstLetter
select e;
foreach (string s in finalResults) Console.Write(s + " ");
5
Monika
Monika Marta
Marta
Karol
nic nie zostanie wyświetlone
a

W przypadku funkcji haszującej powodującej liczne kolizje, która kolekcja zapewni najlepsze osiągi przy dużej liczbie elementów?
5
SortedList
LinkedList
HashList
SortedSet
HashSet
d

Kod napisany w C# po skompilowaniu można uruchomić na (2 odpowiedzi poprawne):
5
CLS
CoreCLS
CLR
CoreCLR
.NET SDK
cd

Instancje typu prostego `int` (2 odpowiedzi poprawne):
5
tworzone są tylko na stosie
tworzone są tylko na stercie
mogą być automatycznie skonwertowane na `long`
mogą być automatycznie skonwertowane na `object`
można do nich przypisać pseudo-wartość `null`
cd

Kolekcja SortedDictionary (2 odpowiedzi poprawne):
5
utrzymuje porządek według kluczy, a jeśli 2 elementy mają taki sam klucz to według wartości
utrzymuje porządek według wartości, a jeśli 2 elementy mają taką samą wartość to według kluczy
w ogólnym przypadku zapewnia szybsze wstawianie dużej liczby elementów niż SortedList
w ogólnym przypadku zapewnia szybsze usuwanie elementów niż SortedList
zapewnia dostęp poprzez indeks
cd

Jeśli typem zwracanym przez `myMethod()` jest `Task<string>` to wyrażenie `await myMethod()` będzie typu:
5
`string`
`Task<string>`
`Task<Task<string>>`
`Task<object>`
`Task`
a

Które klasy dostarczają metodę do zmiany bieżącej pozycji w strumieniu (2 odpowiedzi poprawne):
4
`FileStream`
`MemoryStream`
`StreamReader`
`StringReader`
ab

Aby obiekty pewnej klasy mogły być serializowane przeez `XmlSerializer`, klasa ta musi (2 odpowiedzi poprawne):
4
być oznaczona atrybutem `Serializable`
posiadać bezparametrowy konstruktor
być publiczna
implementować interfejs `Serializable`
bc

Jeśli instrukcja `string str = await myObject.myMethod();` jest poprawna, to typem zwracanym przez `myMethod()` jest:
5
`string`
`Task<void>`
`Task<string>`
`Task<object>`
`Task`
c

Pola klas bez podanego modyfikatora dostępu są:
4
`Protected`
`Public`
`Private`
`Internal`
c

Które stwierdzenie dotyczące zmiennej typu `var` jest niepoprawne?
4
może posłużyć do przypisania wyniku zapytania LINQ
może być wykorzystana jako parametr metody (np. `void metoda(var zmienna)`)
docelowy typ zmiennej jest określany przez kompilator
nie może być zdefiniowana jako pole klasy
b

Jakie elementy języka może zostać zadeklarowany jako elementy typu `partial` (2 odpowiedzi poprawne)?
4
delegat
property
klasa
metoda
cd

Który atrybut pozwala na ominięcie publicznego pola klasy podczas serializacji do XML?
4
`XmlType`
`XmlIgnore`
`XmlAttribute`
`XmlOmmit`
b

Czym jest CIL (MSIL)?
4
debugger programów dla platformy .NET
maszyna wirtualna odpowiedzialna za uruchamianie programów
język pośredni, do którego kompilowany jest kod
zestaw klas bazowych dostępnych dla całej platformy .NET
c

Które zapytanie LINQ pozwala na wybranie wszystkich elementów z kolekcji obiektów klasy i których pola mają wartości wiek > 20 i wzrost < 180?
4
`IEnumerable<A> wynik = from x in lista where x.Wiek > 20 && x.Wzrost < 180 select x;`
`string wynik = from x in lista where x.Wiek > 20 && x.Wzrost < 180 select x;`
`IEnumerable wynik = for x in lista where x.Wiek > 20 and x.Wzrost < 180 select x;`
`A wynik = from x in lista where x.wiek > 20 && x.Wzrost < 180 select x;`
a

Która deklaracja definiuje klasę `MyClass` jako klasę implementująca interfejs `IInterface`?
4
`public class MyClass overrides IInterface`
`public class MyClass : IInterface`
`public class MyClass implements IInterface`
`public class MyClass extends IInterface`
b

Operator `==` pozwala na (2 odpowiedzi poprawne):
4
porównywanie wartości kolekcji
porównywanie referencji obiektów
porównywanie wartości obiektów
porównywanie referencji typów prostych
bc

Którą instrukcję możemy wykorzystać zamiast bloku `finally` do zamknięcia połączenia z bazą danych dzięki automatycznemu wykonaniu metody `Dispose` na obiekcie połączenia?
4
`using`
`yield`
`as`
`volatile`
a

Jaki rodzaj serializacji nie jest standardowo dostępny na platformie .NET?
4
Serializacja binarna
Serializacja protokołu SOAP
Serializacja do formatu XML
Serializacja do formatu UML
d

Który z poziomów uprawnień nie istnieje w Code Access Security?
4
User
Enterprise
Machine
Application
d

Jakie jest rozwinięcie skrótu CLR?
4
Common Launch Repeater
Common Language Runtime
Class Loading Runtime
Callback Loop Resolver
b

Jaki interfejs musi implementować kolekcja, by można było iterować po jej elementach za pomocą pętli `foreach`?
4
`IListable`
`IEnumerable`
`ILoop`
`ICountable`
b

Który z elementów został wprowadzony w .NET 2.0?
4
Windows Workflow Foundation
Wsparcie dla generyczności
Task Parallel Library
LINQ
b
